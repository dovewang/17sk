<?xml version="1.0" encoding="UTF-8"?>

<!-- CacheManager Configuration ========================== An ehcache.xml 
	corresponds to a single CacheManager. See instructions below or the ehcache 
	schema (ehcache.xsd) on how to configure. System property tokens can be specified 
	in this file which are replaced when the configuration is loaded. For example 
	multicastGroupPort=${multicastGroupPort} can be replaced with the System 
	property either from an environment variable or a system property specified 
	with a command line switch such as -DmulticastGroupPort=4446. Another example, 
	useful for Terracotta server based deployments is <terracottaConfig url="${serverAndPort}"/ 
	and specify a command line switch of -Dserver36:9510 The attributes of <ehcache> 
	are: * name - an optional name for the CacheManager. The name is optional 
	and primarily used for documentation or to distinguish Terracotta clustered 
	cache state. With Terracotta clustered caches, a combination of CacheManager 
	name and cache name uniquely identify a particular cache store in the Terracotta 
	clustered memory. * updateCheck - an optional boolean flag specifying whether 
	this CacheManager should check for new versions of Ehcache over the Internet. 
	If not specified, updateCheck="true". * dynamicConfig - an optional setting 
	that can be used to disable dynamic configuration of caches associated with 
	this CacheManager. By default this is set to true - i.e. dynamic configuration 
	is enabled. Dynamically configurable caches can have their TTI, TTL and maximum 
	disk and in-memory capacity changed at runtime through the cache's configuration 
	object. * monitoring - an optional setting that determines whether the CacheManager 
	should automatically register the SampledCacheMBean with the system MBean 
	server. Currently, this monitoring is only useful when using Terracotta clustering 
	and using the Terracotta Developer Console. With the "autodetect" value, 
	the presence of Terracotta clustering will be detected and monitoring, via 
	the Developer Console, will be enabled. Other allowed values are "on" and 
	"off". The default is "autodetect". This setting does not perform any function 
	when used with JMX monitors. -->
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="ehcache.xsd" updateCheck="false"
	monitoring="autodetect" dynamicConfig="true">

	<!-- DiskStore configuration ======================= The diskStore element 
		is optional. To turn off disk store path creation, comment out the diskStore 
		element below. Configure it if you have overflowToDisk or diskPersistent 
		enabled for any cache. If it is not configured, and a cache is created which 
		requires a disk store, a warning will be issued and java.io.tmpdir will automatically 
		be used. diskStore has only one attribute - "path". It is the path to the 
		directory where .data and .index files will be created. If the path is one 
		of the following Java System Property it is replaced by its value in the 
		running VM. For backward compatibility these should be specified without 
		being enclosed in the ${token} replacement syntax. The following properties 
		are translated: * user.home - User's home directory * user.dir - User's current 
		working directory * java.io.tmpdir - Default temp file path * ehcache.disk.store.dir 
		- A system property you would normally specify on the command line e.g. java 
		-Dehcache.disk.store.dir=/u01/myapp/diskdir ... Subdirectories can be specified 
		below the property e.g. java.io.tmpdir/one -->
	<diskStore path="java.io.tmpdir" />


	<!--Default Cache configuration. These will applied to caches programmatically 
		created through the CacheManager. The following attributes are required: 
		maxElementsInMemory - Sets the maximum number of objects that will be created 
		in memory eternal - Sets whether elements are eternal. If eternal, timeouts 
		are ignored and the element is never expired. overflowToDisk - Sets whether 
		elements can overflow to disk when the in-memory cache has reached the maxInMemory 
		limit. The following attributes are optional: timeToIdleSeconds - Sets the 
		time to idle for an element before it expires. i.e. The maximum amount of 
		time between accesses before an element expires Is only used if the element 
		is not eternal. Optional attribute. A value of 0 means that an Element can 
		idle for infinity. The default value is 0. timeToLiveSeconds - Sets the time 
		to live for an element before it expires. i.e. The maximum time between creation 
		time and when an element expires. Is only used if the element is not eternal. 
		Optional attribute. A value of 0 means that and Element can live for infinity. 
		The default value is 0. diskPersistent - Whether the disk store persists 
		between restarts of the Virtual Machine. The default value is false. diskExpiryThreadIntervalSeconds- 
		The number of seconds between runs of the disk expiry thread. The default 
		value is 120 seconds. -->

	<defaultCache maxElementsInMemory="100000" eternal="false"
		overflowToDisk="true" timeToIdleSeconds="120" timeToLiveSeconds="120"
		diskPersistent="false" diskExpiryThreadIntervalSeconds="120" />
	<cache name="flint.cache.session" maxElementsInMemory="100000"
		eternal="false" overflowToDisk="true" timeToIdleSeconds="1800"
		diskPersistent="false" diskExpiryThreadIntervalSeconds="1800" />
	<!-- 临时数据缓存 -->
	<cache name="flint.cache.temp" maxElementsInMemory="100000"
		eternal="false" overflowToDisk="true" timeToIdleSeconds="120"
		diskPersistent="false" diskExpiryThreadIntervalSeconds="120" />
	<!-- 系统数据缓存 -->
	<cache name="flint.cache.system" maxElementsInMemory="100000"
		eternal="false" overflowToDisk="true" timeToIdleSeconds="3600"
		diskPersistent="true" diskExpiryThreadIntervalSeconds="120" />
	<!-- 知识点数据缓存 -->
	<cache name="flint.cache.kownledge" maxElementsInMemory="100000"
		eternal="false" overflowToDisk="false" timeToIdleSeconds="0">
		<searchable>
			<searchAttribute name="grade" expression="value.getGrade()" />
			<searchAttribute name="kind" expression="value.getKind()" />
			<searchAttribute name="parentKownledgeId" expression="value.getParentKnowledgeId()" />
		</searchable>
	</cache>
	<!-- 站点信息缓存 -->
	<cache name="flint.cache.site" maxElementsInMemory="100000"
		eternal="false" overflowToDisk="false" timeToIdleSeconds="0">
		<searchable>
			<searchAttribute name="id" expression="value.getId()" />
		</searchable>
	</cache>
	<!-- 方法缓存 -->
	<cache name="flint.cache.method" maxElementsInMemory="50000"
		eternal="false" overflowToDisk="true" timeToIdleSeconds="120"
		timeToLiveSeconds="120" diskPersistent="true"
		diskExpiryThreadIntervalSeconds="120" />
</ehcache>